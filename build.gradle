import java.util.stream.Collectors

buildscript {
    ext.kotlinVersion = '1.3.21'
    ext.spekVersion = '1.1.5'
    ext.moshiVersion = '1.8.0'
    ext.autoValueVersion = '1.6.3'
    ext.dokkaVersion = '0.9.16'
    ext.okhttpVersion = '3.13.1'

    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

apply plugin: 'jacoco'
apply plugin: 'eclipse'

repositories {
    jcenter()
}

subprojects {
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'kotlin'
    apply plugin: 'jacoco'

    sourceCompatibility = '8'
    targetCompatibility = '8'
    group = 'net.dean.jraw'
    version = '1.1.0'

    repositories {
        jcenter()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        testCompile 'com.winterbe:expekt:0.5.0'
        testCompile ("org.jetbrains.spek:spek-api:$spekVersion") {
            exclude group: 'org.jetbrains.kotlin'
        }
        testRuntime 'org.junit.platform:junit-platform-engine:1.4.0'
        testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
    }

    compileKotlin {
        kotlinOptions {
            apiVersion = "1.1"
            languageVersion = "1.1"
        }
    }

    project.afterEvaluate {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        jacoco {
            toolVersion = "0.7.9"
            reportsDir = file("$buildDir/reports/jacoco")
            applyTo junitPlatformTestTask
        }

        project.task(type: JacocoReport, "junitPlatformJacocoReport", {
            sourceDirectories = files("src/main/kotlin")
            classDirectories = files("$buildDir/classes/main")
            reports {
                xml.enabled = true
                html.enabled = true
                xml.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
                html.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.html")
            }
            executionData junitPlatformTestTask
        })
    }

    junitPlatform {
        platformVersion '1.2.0'
        filters {
            engines {
                include 'spek'
            }
        }
    }
}

// Only do code coverage for :lib
def reportedProjects = subprojects.findAll { it.name == "lib" }
def subprojectsExecFiles = files(reportedProjects.stream().map { "${it.name}/build/jacoco/junitPlatformTest.exec" }.collect(Collectors.toList()) )

task jacocoRootReport(type: JacocoReport) {
    additionalSourceDirs = files(reportedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(reportedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(reportedProjects.sourceSets.main.output)
    executionData = subprojectsExecFiles
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }
}
