plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.4.0x'
}

ext {
    releaseDest = new File(project.buildDir, "releases")
    generatedJavaSrc = file("src/gen/java/")
}

allprojects {
    sourceCompatibility = 1.7
    group = 'net.dean.jraw'
    version = '0.8.0'

    repositories {
        mavenCentral()
    }

    compileJava.options.encoding = 'UTF-8'
}

dependencies {
    compile     'com.squareup.okhttp:okhttp:2.7.0'
    compile     'com.fasterxml.jackson.core:jackson-databind:2.6.0'
    compile     'com.google.guava:guava:19.0'
    compile     'org.slf4j:slf4j-api:1.7.13'
    testCompile 'org.slf4j:slf4j-simple:1.7.13'
    testCompile 'org.testng:testng:6.9.10'
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.19'
}

// Add the generated source to the main Java source directories
sourceSets.main.java.srcDir ext.generatedJavaSrc

task fatJar(type: Jar, dependsOn: assemble) {
    classifier = 'fat'
    destinationDir = releaseDest
    from(
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) },
        sourceSets.main.output
    )
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    destinationDir = releaseDest
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    destinationDir = releaseDest
    from sourceSets.main.allSource
}

task release(type: Jar, dependsOn: ['fatJar', 'sourcesJar']) {

    from sourceSets.main.output
    destinationDir = releaseDest
}

javadoc {
    def overrideVersion = System.properties.'javadoc-version'
    def version = overrideVersion != null ? overrideVersion : project.version
    title = "${project.name} $version API"
}

test {
    useTestNG()

    testLogging {
        // Show stderr and stdout (useful for exceptions)
        showStandardStreams = true
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor.className}.${descriptor.name}")
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls depends on XML reports
        html.enabled = true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

