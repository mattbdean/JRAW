import net.dean.jraw.gradle.GitbookPush
import net.dean.jraw.gradle.VersionCommitTask

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

ext.projectName = 'JRAW'

dependencies {
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"

    def moshi = "com.squareup.moshi:moshi:$moshiVersion"
    compile moshi
    testCompile("com.squareup.moshi:moshi-kotlin:$moshiVersion") {
        exclude group: 'com.squareup.moshi'
    }

    apt('com.ryanharter.auto.value:auto-value-moshi:0.4.5') {
        exclude group: 'com.squareup.moshi'
    }
    apt moshi
    apt "com.google.auto.value:auto-value:$autoValueVersion"

    compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    compileOnly('com.ryanharter.auto.value:auto-value-moshi-annotations:0.4.5') {
        exclude group: 'com.squareup.moshi'
    }

    testCompile "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.29'
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testCompile 'org.reflections:reflections:0.9.10'
}

sourceSets {
    gen // Generated Java code (see the :meta project)
    main {
        java {
            // Include generated sources
            source gen.allSource
        }
    }
}

dokka {
    moduleName = 'jraw'
    jdkVersion = 8
    impliedPlatforms = ['JVM']
    reportUndocumented = true
    outputFormat = 'javadoc'
    includes = ['packages.md']

    linkMapping {
        dir = file('src/main/kotlin')
        url = 'https://github.com/mattbdean/JRAW/tree/master/lib/src/main/kotlin'
        suffix = '#L'
    }
}

// Don't build in Travis to reduce spam. Remove when dokka 0.9.16 comes out.
if (System.getenv("TRAVIS")) {
    dokka.enabled = false
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
    baseName = projectName
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    baseName = projectName
}

jar {
    baseName = projectName
}

// When JitPack builds, it runs the install task (from the maven plugin) to install all artifacts listed here to the
// local repository. List the sources and Javadoc jar here to make it available to JitPack users. The bintrayUpload task
// also uses this to find which jars to upload on release.
artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = project.hasProperty("bintrayUser") ? bintrayUser : null
    key = project.hasProperty("bintrayKey") ? bintrayKey : null
    pkg {
        repo = 'maven'
        name = projectName
        licenses = ['MIT']
        vcsUrl = 'https://github.com/mattbdean/JRAW.git'
        issueTrackerUrl = 'https://github.com/mattbdean/JRAW/issues'
        githubRepo = 'mattbdean/JRAW'

        version {
            name = project.version
            released = new Date()
            vcsTag = "v${project.version}"
        }
    }

    // Upload sources, Javadoc, and the compiled jars
    configurations = ['archives']
}

// Pushes any new changes to GitBook and creates a version tag for the new version
task pushReleaseDocs(type: GitbookPush, dependsOn: [':docs:buildSite']) {
    username project.hasProperty("gitbookUsername") ? gitbookUsername : null
    password project.hasProperty("gitbookPassword") ? gitbookPassword : null
    repository "https://git.gitbook.com/mattbdean/jraw.git"
    compiledBookDir rootProject.project('docs').file("build/docs").absoluteFile
    createVersionTag true
}

// Creates the commit for a new version of the library. Also updates metadata files
task createVersionTask(type: VersionCommitTask, dependsOn: [':meta:update'])

// The real power of this task comes from its dependencies
task release(dependsOn: [clean, check, createVersionTask, pushReleaseDocs, bintrayUpload])

if (!hasProperty("authorizeRelease") || property("authorizeRelease") != project.version) {
    // Disable the release tasks unless authorizeRelease contains the correct string
    def val = hasProperty("authorizeRelease") ? property("authorizeRelease") : "(missing)"
    [release, createVersionTask, pushReleaseDocs, bintrayUpload]*.enabled = false
    println("Release disabled, expected property 'authorizeRelease' to equal ${project.version}, was ${val}")
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
